generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  isPro          Boolean   @default(false)

  accounts      Account[]
  conversations Conversation[]
}

model Conversation {
  id   String @id @default(cuid())
  name String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  role      String
  content   String
  createdAt DateTime @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
}

model Category {
  id         String      @id @default(cuid())
  name       String
  companions Companion[]
}

model Companion {
  id           String @id @default(cuid())
  userId       String
  name         String @db.Text
  src          String
  description  String
  instructions String @db.Text
  seed         String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  companionMessages CompanionMessage[]
}

enum Role {
  User
  System
}

model CompanionMessage {
  id      String @id @default(cuid())
  role    Role
  content String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companionId String
  userId      String

  companion Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)
}
